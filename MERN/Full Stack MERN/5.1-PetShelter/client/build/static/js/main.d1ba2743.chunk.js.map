{"version":3,"sources":["components/PetForm.js","components/PetList.js","components/PetInfo.js","components/EditPetForm.js","views/Main.js","App.js","serviceWorker.js","index.js"],"names":["useState","name","setName","type","setType","description","setDescription","skill1","setSkill1","skill2","setSkill2","skill3","setSkill3","errors","setErrors","className","onSubmit","e","preventDefault","axios","post","then","res","data","navigate","console","log","catch","err","onChange","target","value","message","onClick","props","pets","setPets","useEffect","Axios","get","map","pet","key","_id","to","setPet","likes","getPet","response","put","document","getElementById","setAttribute","id","delete","PetList","path","PetForm","PetInfo","EditPetForm","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1ba2743.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { navigate } from '@reach/router';\n\nexport default () => {\n    const [name, setName] = useState(\"\");\n    const [type, setType] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [skill1, setSkill1] = useState(\"\");\n    const [skill2, setSkill2] = useState(\"\");\n    const [skill3, setSkill3] = useState(\"\");\n    const [errors, setErrors] = useState({});\n\n\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        axios.post('http://localhost:8000/api/pet', {\n            name,\n            type,\n            description,\n            skill1,\n            skill2,\n            skill3,\n        })\n            .then(res => {\n                if(res.data.errors) {\n                    setErrors(res.data.errors);\n                }\n                else {\n                    navigate(\"/\")\n                }\n                console.log(res)\n                \n            })\n            .catch(err => console.log(err))\n    }\n    \n\n    \n\n\n    return (\n        <div className=\"container\">\n            <h1>Pet Shelter</h1>\n            <h3>Know of a pet needing a home?</h3>\n            <form onSubmit={onSubmitHandler}>\n                <div className=\"form-group\">\n                    <label>Pet Name</label>\n                    <input type=\"text\" onChange = {e => setName(e.target.value)} className=\"form-control\" />\n                    <span className=\"text-danger\">{errors.name ? errors.name.message: \"\" }</span>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Pet Type</label>\n                    <input type=\"text\" onChange = {e => setType(e.target.value)} className=\"form-control\" />\n                    <span className=\"text-danger\">{errors.type ? errors.type.message: \"\" }</span>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Description</label>\n                    <input type=\"text\" onChange = {e => setDescription(e.target.value)} className=\"form-control\" />\n                    <span className=\"text-danger\">{errors.description ? errors.description.message: \"\" }</span>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Skill 1</label>\n                    <input type=\"text\" onChange = {e => setSkill1(e.target.value)} className=\"form-control\" />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Skill 2</label>\n                    <input type=\"text\" onChange = {e => setSkill2(e.target.value)} className=\"form-control\" />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Skill 3</label>\n                    <input type=\"text\" onChange = {e => setSkill3(e.target.value)} className=\"form-control\" />\n                </div>\n\n                <input type=\"submit\" value=\"Add Pet\" className=\"btn btn-primary\" />\n                <button onClick={e => {navigate(\"/\")}} className=\"btn btn-danger\">Cancel</button>\n                \n            </form>\n        </div>\n    )\n\n}","import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport { Link } from '@reach/router';\n\n\nexport default props => {\n\n    const getEverything = () => {\n        Axios.get(\"http://localhost:8000/api/pets\")\n            .then(res => setPets(res.data))\n            .catch(err => console.log(err));\n    };\n\n    const [pets, setPets] = useState([]);\n    useEffect( () => {\n        getEverything();\n    }, []);\n\n    \n    \n\n    return(\n        <div className=\"container\">\n            <h1>Pet Shelter</h1>\n            <h3>These pets are looking for a home</h3>\n            <table className=\"table table-hover table-striped\">\n                <tbody>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Actions</th>\n                    </tr>\n                    {\n                        pets.map( pet =>\n                            <tr key={pet._id}>\n                                <td><Link to={`/pet/${pet._id}`}>{pet.name}</Link></td>\n                                <td>{pet.type}</td>\n                                <td>\n                                    <Link to={`/edit/${pet._id}`} className=\"btn-link\" >Edit</Link>\n                                    \n                                </td>\n                                \n                            </tr>\n                        )\n                    }\n                </tbody>\n            </table>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { navigate } from '@reach/router';\n\n\nexport default props => {\n    const [pet, setPet] = useState({})\n    const [likes, setLikes] = useState(0)\n\n\n    const getPet = () => {\n        axios.get(\"http://localhost:8000/api/pet/\" + props._id)\n        .then(response => {\n            setPet(response.data)\n            console.log(response)\n        })\n        .catch(err => console.log(\"Error:\", err))\n    }\n\n\n    useEffect( () => {\n        getPet();\n        \n    }, [props._id])\n\n    const deleteObject = (_id) => {\n        axios.delete(`http://localhost:8000/api/pet/${_id}`)\n            .then(res => {\n                console.log(res)\n                navigate(\"/\")\n            })\n            .catch(err => console.log(err))\n    }\n\n    // const likePet = (_id) => {\n    //     setLikes(pet.likes)\n    //     console.log(likes)\n    //     let temp = likes;\n    //     setLikes(temp + 1)\n        \n    //     axios.put(`http://localhost:8000/api/pet/${_id}`, {\n    //         likes\n    //     })\n    //         .then(res => {\n    //             console.log(res)\n    //         })\n    //         .catch(err => console.log(err))\n    // }\n\n    const likePet = _id => {\n\n        axios.put(\"http://localhost:8000/api/like/\" + _id, {\n            likes\n        })\n            .then(res => {\n                console.log(res)\n                getPet();\n            })\n            .catch(err => console.log(err))\n            document.getElementById('button').setAttribute(\"disabled\", \"disabled\");\n    }\n\n    return (\n        <div className=\"container\">\n            <h3>Details about {pet.name}</h3>\n            <p>Pet type: {pet.type}</p>\n            <p>Description: {pet.description}</p>\n            <p>Skills: \n                <ul>\n                    {pet.skill1 ? <li>{pet.skill1}</li> : \"\" }\n                    {pet.skill2 ? <li>{pet.skill2}</li> : \"\" }\n                    {pet.skill3 ? <li>{pet.skill3}</li> : \"\" }\n                </ul>\n            </p>\n            <p>Likes: {pet.likes}</p>\n\n            <button onClick={ e => {likePet(pet._id)}} id=\"button\">Like this pet</button>\n            <button onClick={ e => {deleteObject(pet._id)}} className=\"btn btn-link align-baseline\">Adopt this pet!</button>\n        </div>\n\n    )\n}","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { navigate } from '@reach/router';\n\nexport default props => {\n    const [name, setName] = useState(\"\");\n    const [type, setType] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [skill1, setSkill1] = useState(\"\");\n    const [skill2, setSkill2] = useState(\"\");\n    const [skill3, setSkill3] = useState(\"\");\n    const [errors, setErrors] = useState({});\n\n\n    useEffect( () => {\n        axios.get(`http://localhost:8000/api/pet/${props._id}`)\n            .then(res => {\n                setName(res.data.name);\n                setType(res.data.type);\n                setDescription(res.data.description);\n                setSkill1(res.data.skill1);\n                setSkill2(res.data.skill2);\n                setSkill3(res.data.skill3);\n                console.log(res.data)\n            })\n            .catch(err => console.log(err))\n    }, [props._id])\n\n\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        axios.put(`http://localhost:8000/api/pet/${props._id}`, {\n            name,\n            type,\n            description,\n            skill1,\n            skill2,\n            skill3\n        })\n            .then(res => {\n                if(res.data.errors) {\n                    setErrors(res.data.errors);\n                }\n                else {\n                    navigate(\"/\")\n                }\n                console.log(res)\n                \n            })\n            .catch(err => console.log(err))\n    }\n\n\n\n    return (\n        <div className=\"container\">\n            <h1>Pet Shelter</h1>\n            <h3>Know of a pet needing a home?</h3>\n            <form onSubmit={onSubmitHandler}>\n                <div className=\"form-group\">\n                    <label>Pet Name</label>\n                    <input type=\"text\" onChange = {e => setName(e.target.value)} className=\"form-control\" value={name} />\n                    <span className=\"text-danger\">{errors.name ? errors.name.message: \"\" }</span>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Pet Type</label>\n                    <input type=\"text\" onChange = {e => setType(e.target.value)} className=\"form-control\" value={type} />\n                    <span className=\"text-danger\">{errors.type ? errors.type.message: \"\" }</span>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Description</label>\n                    <input type=\"text\" onChange = {e => setDescription(e.target.value)} className=\"form-control\" value={description} />\n                    <span className=\"text-danger\">{errors.description ? errors.description.message: \"\" }</span>\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Skill 1</label>\n                    <input type=\"text\" onChange = {e => setSkill1(e.target.value)} className=\"form-control\" value={skill1} />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Skill 2</label>\n                    <input type=\"text\" onChange = {e => setSkill2(e.target.value)} className=\"form-control\" value={skill2} />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Skill 3</label>\n                    <input type=\"text\" onChange = {e => setSkill3(e.target.value)} className=\"form-control\" value={skill3} />\n                </div>\n\n                <input type=\"submit\" value=\"Edit Pet\" className=\"btn btn-success\"/>\n                \n            </form>\n        </div>\n    )\n\n}","import React, {useEffect, useState } from 'react';\nimport axios from 'axios';\nimport PetForm from '../components/PetForm';\nimport PetList from '../components/PetList';\nimport PetInfo from '../components/PetInfo'; \nimport EditPetForm from '../components/EditPetForm';\nimport { Router, Link } from '@reach/router';\n\nexport default () => {\n    return (\n        <>\n            <div className=\"container\">\n                <Link to=\"/\">Home</Link> | \n                <Link to=\"/new\"> Add a pet to the shelter</Link>\n            </div>\n            \n            <Router>\n                <PetList path=\"/\" />\n                <PetForm path=\"/new\" />\n                <PetInfo path=\"/pet/:_id\" />\n                <EditPetForm path=\"/edit/:_id\" />\n            </Router>\n\n        </>\n    )\n}\n","import React from 'react';\nimport Main from './views/Main'\n\nfunction App() {\n  return (\n    <>\n      <Main />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}